Title,Link,General Notes,Application to Architectural Weird Machines
Hacking and Computer Science,https://fahrplan.events.ccc.de/congress/2010/Fahrplan/attachments/1807_ccc-hacker-research.pdf,"Composition (combining tools/systems), computation (machines, theory, FA, Pushdown, Turing), and complexity are primary principles of computer science. Theoretical computation is often a simple prototype due to high complexity. ","Data pushed through an implementation of theoretical computation (machines) can introduce ""weird states"" because prototypes do not often consider all possibilities in extremely complex machines. The crafting of this malicious data is exploitation. Data controls the machine, not vice versa."
"From Buffer Overflows to “Weird Machines” and  
Theory of Computation ",https://langsec.org/papers/Bratus.pdf,"Article introduces the concept of ""weird instructions,"" where an exploit reuses or borrows instructions from the target program for its own purposes, often RET and MOV to move to specific parts of the code.

Adding new, convenient features (e.g. HTML in emails) makes way for new exploitation paths. There is a tradeoff between security and convenience.

Exploits as defined in papers are effectively the programmatic approach to mathematical proofs.","There is a connection to be made between theoretical computer science and exploitation research; exploits are proofs of a weird machine being present. A separate, ""weird"" automaton can be defined within an existing implementation by crafting specific inputs and reusing and assembly  instructions. This is especially evident in vulnerabilites like buffer overflows and format strings. Theoretically, weird machines ""latently"" exist in every program."
Programming the Weird Machine,https://gwern.net/doc/cs/security/2011-dullien.pdf,Attackers only need to find one path of exploitation. Defenders must find and patch them all.,"""Exploitation is setting up, instantiating, and programming the weird machine.""

Weird machines are application-dependent and difficult to control; the inital state becomes incredibly important, especially for memory exploits. As such, unintentional weird states are difficult to replicate."
Crema,https://odu.primo.exlibrisgroup.com/permalink/01ODU_INST/1fn1mn0/cdi_dtic_stinet_ADA622569,"This article explores the ""Crema"" programming language, a C++ framework that claims to eliminate weird machines and unintended consequences by reducing Turing Complete languages to only the language necessary for the program. This mirrors the principle of least privilege. Turing Complete programming languages are extremely powerful, but also provide room for vulnerabilities.","Restricting the input provided to a program with a formal language grammar could provide another layer of security from ""weird"" states and machines."
Mismorphism: The Heart of the Weird Machine,"Link is broken, try later",,
Computing with Time: Microarchitectural Weird Machines,https://odu.primo.exlibrisgroup.com/permalink/01ODU_INST/1fn1mn0/cdi_proquest_journals_3153901381,,